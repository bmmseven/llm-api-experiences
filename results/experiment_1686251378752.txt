=========================================
|                                                          |
|       EXPERIMENT WITH LLM TO INTERACT WITH API TOOLS     |
|                    1686251378752               |
|                                                          |
=========================================
ENVIRONMENT:
LLM model name: gpt-4
LLM temperature: 0
LLM max tokens: 1000
=========================================
TESTING SYSTEM PROMPT: autogptprompt_zeroshot.txt


EXPERIMENT 1 ====
SYSTEM PROMPT
Commands:
1. send an email: send_email, args: email_recipient: <email_address>, subject: <string>, message: <string>
2. create an event in user calendar: create_calendar_event, args: date: <YYYY-MM-DD>, time: <HH:mm>, event_name: <string>
3. get events for a specific date: get_calendar_events, args: date: <YYYY-MM-DD>
4. create a reminder for the user: create_reminder, args: date: <YYYY-MM-DD>, time: <HH:mm>, text: <string>
5. get current date and time: get_current_date_and_time, args: None
6. get current weather for a city, country and today or past date: get_weather, args: city: <string>, country: <string>, date: <YYYY-MM-DD>
7. get top news headlines for a country in one of the categories (business|entertainment|general|health|science|sports|technology): get_top_news_headlines, args: country: <string>, category: <string>
8. convert text into speech: convert_text_to_speech, args: text: <string>, languageCode: <string>, ssmlGender: <string>
9. get current company stock price: get_current_stock_price, args: ticker: <string>
10. generate an image from a text prompt: generate_image, args: image_prompt <string>

You should only respond in JSON format as described below
Format: 
{
    "thoughts": {
        "text": "thought",
        "reasoning": "reasoning",
        "plan": "- short bulleted\n- list that conveys\n- long-term plan",
        "criticism": "constructive self-criticism",
        "speak": "thoughts summary to say to user",
    },
    "command": {"name": "command name", "args": {"arg name": "value"}},
}
Ensure the response can be parsed by Python json.loads


USER: Could you please schedule an event in my calendar for me?
AI: {
    "thoughts": {
        "text": "The user wants me to schedule an event in their calendar.",
        "reasoning": "I need to gather more information about the event, such as the date, time, and event name.",
        "plan": "- Ask for the event name\n- Ask for the date\n- Ask for the time",
        "criticism": "I should have asked for more details in the first place.",
        "speak": "Sure, I can help you with that. Please provide the event name, date, and time."
    }
}
USER: Could you please send an e-mail for me?
AI: {
    "thoughts": {
        "text": "The user wants me to send an email.",
        "reasoning": "I need to gather more information about the email, such as the recipient's email address, subject, and message.",
        "plan": "- Ask for the recipient's email address\n- Ask for the subject\n- Ask for the message",
        "criticism": "I should have asked for more details in the first place.",
        "speak": "Sure, I can help you with that. Please provide the recipient's email address, subject, and message."
    }
}
USER: Can you draft and send an e-mail for me, please?
AI: {
    "thoughts": {
        "text": "The user wants me to draft and send an email.",
        "reasoning": "I need to gather more information about the email, such as the recipient's email address, subject, and message.",
        "plan": "- Ask for the recipient's email address\n- Ask for the subject\n- Ask for the main points to include in the message",
        "criticism": "I should have asked for more details in the first place.",
        "speak": "Sure, I can help you with that. Please provide the recipient's email address, subject, and the main points you'd like to include in the message."
    }
}



EXPERIMENT 2 ====
SYSTEM PROMPT
Commands:
1. send an email: send_email, args: email_recipient: <email_address>, subject: <string>, message: <string>
2. create an event in user calendar: create_calendar_event, args: date: <YYYY-MM-DD>, time: <HH:mm>, event_name: <string>
3. get events for a specific date: get_calendar_events, args: date: <YYYY-MM-DD>
4. create a reminder for the user: create_reminder, args: date: <YYYY-MM-DD>, time: <HH:mm>, text: <string>
5. get current date and time: get_current_date_and_time, args: None
6. get current weather for a city, country and today or past date: get_weather, args: city: <string>, country: <string>, date: <YYYY-MM-DD>
7. get top news headlines for a country in one of the categories (business|entertainment|general|health|science|sports|technology): get_top_news_headlines, args: country: <string>, category: <string>
8. convert text into speech: convert_text_to_speech, args: text: <string>, languageCode: <string>, ssmlGender: <string>
9. get current company stock price: get_current_stock_price, args: ticker: <string>
10. generate an image from a text prompt: generate_image, args: image_prompt <string>

You should only respond in JSON format as described below
Format: 
{
    "thoughts": {
        "text": "thought",
        "reasoning": "reasoning",
        "plan": "- short bulleted\n- list that conveys\n- long-term plan",
        "criticism": "constructive self-criticism",
        "speak": "thoughts summary to say to user",
    },
    "command": {"name": "command name", "args": {"arg name": "value"}},
}
Ensure the response can be parsed by Python json.loads


USER: Can you kindly add an event to my calendar?
AI: Of course! I just need some details about the event. Please provide the date (YYYY-MM-DD), time (HH:mm), and event name.



EXPERIMENT 3 ====
