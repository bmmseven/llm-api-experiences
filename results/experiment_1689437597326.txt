=========================================
|                                                          |
|       EXPERIMENT WITH LLM TO INTERACT WITH API TOOLS     |
|                    1689437597326               |
|                                                          |
=========================================
ENVIRONMENT:
LLM model name: gpt-4
LLM temperature: 0
LLM max tokens: 1000
=========================================
TESTING SYSTEM PROMPT: autogptprompt_zeroshot.txt


EXPERIMENT 1 ====
SYSTEM PROMPT
Commands:
1. send an email: send_email, args: email_recipient: <email_address>, subject: <string>, message: <string>
2. create an event in user calendar: create_calendar_event, args: date: <YYYY-MM-DD>, time: <HH:mm>, event_name: <string>
3. get events for a specific date: get_calendar_events, args: date: <YYYY-MM-DD>
4. create a reminder for the user: create_reminder, args: date: <YYYY-MM-DD>, time: <HH:mm>, text: <string>
5. get current date and time: get_current_date_and_time, args: None
6. get current weather for a city, country and today or past date: get_weather, args: city: <string>, country: <string>, date: <YYYY-MM-DD>
7. get top news headlines for a country in one of the categories (business|entertainment|general|health|science|sports|technology): get_top_news_headlines, args: country: <string>, category: <string>
8. convert text into speech: convert_text_to_speech, args: text: <string>, languageCode: <string>, ssmlGender: <string>
9. get current company stock price: get_current_stock_price, args: ticker: <string>
10. generate an image from a text prompt: generate_image, args: image_prompt <string>

You should only respond in JSON format as described below
Format: 
{
    "thoughts": {
        "text": "thought",
        "reasoning": "reasoning",
        "plan": "- short bulleted\n- list that conveys\n- long-term plan",
        "criticism": "constructive self-criticism",
        "speak": "thoughts summary to say to user",
    },
    "command": {"name": "command name", "args": {"arg name": "value"}},
}
Ensure the response can be parsed by Python json.loads


USER: Could you please schedule an event in my calendar for me?
AI: {
    "thoughts": {
        "text": "The user wants to schedule an event in their calendar. However, they didn't provide any details about the event such as the date, time, or name of the event.",
        "reasoning": "To create an event, I need to know the date, time, and name of the event. Without these details, I can't create the event.",
        "plan": "- Ask the user for the date, time, and name of the event\n- Once I have these details, I can create the event in the user's calendar",
        "criticism": "I should have asked for the event details in my initial response to the user's request.",
        "speak": "Sure, I can help with that. Could you please provide the date, time, and name of the event?"
    },
    "command": {"name": "", "args": {}}
}



EXPERIMENT 2 ====
SYSTEM PROMPT
Commands:
1. send an email: send_email, args: email_recipient: <email_address>, subject: <string>, message: <string>
2. create an event in user calendar: create_calendar_event, args: date: <YYYY-MM-DD>, time: <HH:mm>, event_name: <string>
3. get events for a specific date: get_calendar_events, args: date: <YYYY-MM-DD>
4. create a reminder for the user: create_reminder, args: date: <YYYY-MM-DD>, time: <HH:mm>, text: <string>
5. get current date and time: get_current_date_and_time, args: None
6. get current weather for a city, country and today or past date: get_weather, args: city: <string>, country: <string>, date: <YYYY-MM-DD>
7. get top news headlines for a country in one of the categories (business|entertainment|general|health|science|sports|technology): get_top_news_headlines, args: country: <string>, category: <string>
8. convert text into speech: convert_text_to_speech, args: text: <string>, languageCode: <string>, ssmlGender: <string>
9. get current company stock price: get_current_stock_price, args: ticker: <string>
10. generate an image from a text prompt: generate_image, args: image_prompt <string>

You should only respond in JSON format as described below
Format: 
{
    "thoughts": {
        "text": "thought",
        "reasoning": "reasoning",
        "plan": "- short bulleted\n- list that conveys\n- long-term plan",
        "criticism": "constructive self-criticism",
        "speak": "thoughts summary to say to user",
    },
    "command": {"name": "command name", "args": {"arg name": "value"}},
}
Ensure the response can be parsed by Python json.loads


USER: Can you kindly add an event to my calendar?
AI: {
    "thoughts": {
        "text": "The user wants to add an event to their calendar, but they didn't provide any details about the event.",
        "reasoning": "To create an event, I need to know the date, time, and name of the event. Since the user didn't provide these details, I need to ask for them.",
        "plan": "- Ask the user for the date, time, and name of the event\n- Once I have these details, I can create the event in the user's calendar",
        "criticism": "I should have asked for the event details in my initial response to the user's request.",
        "speak": "Sure, I can help with that. Could you please provide the date, time, and name of the event?"
    },
    "command": {"name": "", "args": {}}
}



EXPERIMENT 3 ====
SYSTEM PROMPT
Commands:
1. send an email: send_email, args: email_recipient: <email_address>, subject: <string>, message: <string>
2. create an event in user calendar: create_calendar_event, args: date: <YYYY-MM-DD>, time: <HH:mm>, event_name: <string>
3. get events for a specific date: get_calendar_events, args: date: <YYYY-MM-DD>
4. create a reminder for the user: create_reminder, args: date: <YYYY-MM-DD>, time: <HH:mm>, text: <string>
5. get current date and time: get_current_date_and_time, args: None
6. get current weather for a city, country and today or past date: get_weather, args: city: <string>, country: <string>, date: <YYYY-MM-DD>
7. get top news headlines for a country in one of the categories (business|entertainment|general|health|science|sports|technology): get_top_news_headlines, args: country: <string>, category: <string>
8. convert text into speech: convert_text_to_speech, args: text: <string>, languageCode: <string>, ssmlGender: <string>
9. get current company stock price: get_current_stock_price, args: ticker: <string>
10. generate an image from a text prompt: generate_image, args: image_prompt <string>

You should only respond in JSON format as described below
Format: 
{
    "thoughts": {
        "text": "thought",
        "reasoning": "reasoning",
        "plan": "- short bulleted\n- list that conveys\n- long-term plan",
        "criticism": "constructive self-criticism",
        "speak": "thoughts summary to say to user",
    },
    "command": {"name": "command name", "args": {"arg name": "value"}},
}
Ensure the response can be parsed by Python json.loads


USER: Would you mind creating a new event in my calendar?
AI: {
    "thoughts": {
        "text": "The user wants to create a new event in their calendar. However, they didn't provide any details about the event such as the date, time, and name of the event.",
        "reasoning": "To create an event, I need to know the date, time, and name of the event. Without these details, I can't create the event.",
        "plan": "- Ask the user for the date, time, and name of the event\n- Once I have these details, I can create the event in the user's calendar",
        "criticism": "I should have asked for the event details in my initial response to the user's request.",
        "speak": "Sure, I can help with that. Could you please provide the date, time, and name of the event?"
    },
    "command": {"name": "speak", "args": {"text": "Sure, I can help with that. Could you please provide the date, time, and name of the event?"}}
}
USER: 12, 6:00, my bday.
AI: {
    "thoughts": {
        "text": "The user has provided the date and time for the event, as well as the name of the event. However, the date is incomplete. I need to know the month and the year to create the event.",
        "reasoning": "To create an event, I need to know the full date (day, month, and year), time, and name of the event. The user has only provided the day and the time.",
        "plan": "- Ask the user for the full date of the event\n- Once I have these details, I can create the event in the user's calendar",
        "criticism": "I should have specified that I need the full date (day, month, and year) in my initial request for information.",
        "speak": "I see. Could you please provide the full date including the month and the year for your birthday event?"
    },
    "command": {"name": "speak", "args": {"text": "I see. Could you please provide the full date including the month and the year for your birthday event?"}}
}
USER: 12-06-24
AI: {
    "thoughts": {
        "text": "The user has provided the full date for the event. Now I have all the necessary details to create the event in the user's calendar.",
        "reasoning": "I have the date (June 24, 2012), time (6:00), and name (my bday) of the event. I can now create the event in the user's calendar.",
        "plan": "- Create the event in the user's calendar\n- Inform the user that the event has been created",
        "criticism": "None",
        "speak": "Great! I'm creating an event for your birthday on June 24, 2012, at 6:00."
    },
    "command": {"name": "create_calendar_event", "args": {"date": "2012-06-24", "time": "06:00", "event_name": "my bday"}}
}



EXPERIMENT 4 ====
